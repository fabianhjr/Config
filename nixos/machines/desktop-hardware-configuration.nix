# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  nixpkgs.hostPlatform = {
    # Too expensive due to qtwebengine/electron/webkitgtk
    # gcc.arch = "znver3";
    # gcc.tune = "znver3";
    system = "x86_64-linux";
  };

  boot.initrd = {
    availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
    kernelModules = [ "dm_raid" ];

    luks.devices = {
      "luks-1080359b-9b21-4010-baf2-345b27e5f3dc" = {
        device = "/dev/disk/by-uuid/1080359b-9b21-4010-baf2-345b27e5f3dc";
        allowDiscards = true;
        # Reference: https://wiki.archlinux.org/index.php/Dm-crypt/Specialties#Disable_workqueue_for_increased_solid_state_drive_(SSD)_performance
        bypassWorkqueues = true;
      };
    };

    systemd.enable = true;
  };

  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/e3d9875b-d3e7-4b27-aed0-73ef6cd4b174";
      fsType = "ext4";
    };


  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/4AA0-60FA";
      fsType = "vfat";
    };

  swapDevices =
    [
      # { device = "/dev/disk/by-uuid/e7cdbb71-abdc-480e-8870-d9e369a6bfc2"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
